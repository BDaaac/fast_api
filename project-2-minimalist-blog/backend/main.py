from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List

app = FastAPI()

# --- CORS ---
origins = ["http://localhost:3000", "http://localhost"]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- Models ---
class PostBase(BaseModel):
    slug: str
    title: str

class PostFull(BaseModel):
    title: str
    slug: str
    content: str
    author: str
    date: str
    category: str

# --- In-memory DB ---
fake_posts_db = [
    {
        "title": "–ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç",
        "slug": "first-post",
        "content": "# –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!\n\n–≠—Ç–æ –º–æ–π –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç –Ω–∞ –±–ª–æ–≥–µ.",
        "author": "–ê–π–≥–µ—Ä–∏–º",
        "date": "2025-06-23",
        "category": "–û–±—â–µ–µ"
    },
    {
        "title": "–í—Ç–æ—Ä–æ–π –ø–æ—Å—Ç",
        "slug": "second-post",
        "content": "## –í—Ç–æ—Ä–æ–π –ø–æ—Å—Ç\n\n–ö–æ–Ω—Ç–µ–Ω—Ç –≤—Ç–æ—Ä–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ Markdown.",
        "author": "–ñ–∞–Ω–Ω–∞",
        "date": "2025-06-24",
        "category": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
    }
]
@app.get("/api/posts", response_model=List[PostFull])  # üü¢ –æ–±–Ω–æ–≤–∏–ª–∏ —Ç—É—Ç
async def get_all_posts():
    return fake_posts_db


@app.get("/api/posts/{slug}", response_model=PostFull)
async def get_post_by_slug(slug: str):
    for post in fake_posts_db:
        if post["slug"] == slug:
            return post
    raise HTTPException(status_code=404, detail="–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

@app.get("/")
async def root():
    return {"message": "Blog API is running"}
